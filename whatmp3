#!/usr/bin/env python

##############################################################
# whatmp3 - Convert FLAC to mp3, create what.cd torrent.
# Created by shardz (logik.li) and demonstar55
##############################################################

import os
import re
import fnmatch
import shutil
from optparse import OptionParser
import threading

VERSION = "3.1"

### BEGIN CONFIGURATION ###

# Output folder unless specified: ("/home/user/Desktop/")
output = os.path.join(os.environ['HOME'], "Desktop/")

# Do you want to move additional files (.jpg, .log, etc)?
moveother = 1

# Do you want to zeropad tracknumbers? (1 => 01, 2 => 02 ...)
zeropad = 1

# Specify tracker ("http://tracker.what.cd:34000/")
tracker = "http://tracker.what.cd:34000/"

# Specify torrent passkey
passkey = ""

# Max number of threads (ex: Normal: 1, Dual-core = 2, Hyperthreaded Dual-core = 4)
max_threads = 1

# Default encoding options
enc_options = {
	'320':	{'enc': 'lame',		'opts': '-b 320 --ignore-tag-errors'},
	'V0':	{'enc': 'lame',		'opts': '-V 0 --vbr-new --ignore-tag-errors'},
	'V2':	{'enc': 'lame',		'opts': '-V 2 --vbr-new --ignore-tag-errors'},
	'Q8':	{'enc': 'oggenc',	'opts': '-q 8'},
	'AAC':	{'enc': 'neroAacEnc',	'opts': '-br 320000'},
	'ALAC':	{'enc': 'ffmpeg',	'opts': '-i - -acodec alac'}
}

### END CONFIGURATION ###

codecs = []

# os.system() and os.popen() have issues with `
def escape(pattern):
	pattern = re.sub('`', '\`', pattern)
	return pattern

class Transcode(threading.Thread):
	def __init__(self, file, flacdir, mp3_dir, codec, options, cv):
		threading.Thread.__init__(self)
		self.file = file
		self.flacdir = flacdir
		self.mp3_dir = mp3_dir
		self.codec = codec
		self.options = options
		self.cv = cv

	def run(self):
		tags = {}
		for tag in ('TITLE', 'ALBUM', 'ARTIST', 'TRACKNUMBER', 'GENRE', 'COMMENT', 'DATE'):
			tagcommand = 'metaflac --show-tag=' + tag + ' "' + self.file + '"'
			temp = re.sub('\S.*=', '', os.popen(escape(tagcommand)).read().rstrip())
			tags.update({tag:temp})
			del temp

		if self.options.zeropad and len(tags['TRACKNUMBER']) == 1:
			tags['TRACKNUMBER'] = '0' + tags['TRACKNUMBER']

		mp3_filename = re.sub(re.escape(self.flacdir), self.mp3_dir, self.file)
		mp3_filename = re.sub('\.flac$', '', mp3_filename)
		if not os.path.exists(os.path.dirname(mp3_filename)):
			os.makedirs(os.path.dirname(mp3_filename))

		flac_command = 'flac -dc -- "' + self.file + '" | '
		tag_command = ''

		if enc_options[self.codec]['enc'] == 'lame':
			flac_command = flac_command + 'lame -S {0} --tt "{t[TITLE]}" --tl "{t[ALBUM]}" --ta "{t[ARTIST]}" --tn "{t[TRACKNUMBER]}" --tg "{t[GENRE]}" --ty "{t[DATE]}" --add-id3v2 - "{1}.mp3" 2>&1'.format(enc_options[self.codec]['opts'], mp3_filename, t=tags)
		elif enc_options[self.codec]['enc'] == 'oggenc':
			flac_command = flac_command + 'oggenc -Q {0} -t "{t[TITLE]}" -l "{t[ALBUM]}" -a "{t[ARTIST]}" -N "{t[TRACKNUMBER]}" -G "{t[GENRE]}" -d "{t[DATE]}" -o "{1}.ogg" - 2>&1'.format(enc_options[self.codec]['opts'], mp3_filename, t=tags)
		elif enc_options[self.codec]['enc'] == 'ffmpeg':
			flac_command = flac_command + 'ffmpeg {0} -metadata title="{t[TITLE]}" -metadata album="{t[ALBUM]}" -metadata author="{t[ARTIST]}" -metadata track="{t[TRACKNUMBER]}" -metadata genre="{t[GENRE]}" -metadata date="{t[DATE]}" "{1}.m4a" 2>&1'.format(enc_options[self.codec]['opts'], mp3_filename, t=tags)
		elif enc_options[self.codec]['enc'] == 'neroAacEnc':
			flac_command = flac_command + 'neroAacEnc {0} -if - -of "{1}.m4a" 2>&1 && neroAacTag "{1}.m4a" -meta:title="{t[TITLE]}" -meta:album="{t[ALBUM]}" -meta:artist="{t[ARTIST]}" -meta:track="{t[TRACKNUMBER]}" -meta:genre="{t[GENRE]}" -meta:year="{t[DATE]}"'.format(enc_options[self.codec]['opts'], mp3_filename, t=tags)

		if self.options.verbose:
			print(escape(flac_command))
		os.system(escape(flac_command))

		self.cv.acquire()
		self.cv.notify_all()
		self.cv.release()

		return 0

def add_enc_option(option, opt, value, parser):
	codecs.append(opt[2:])

def main():
# Parse options and arguments
	usage_text = "%prog [options] [--320 --V2 --Q8 --AAC ...] /path/to/FLAC"
	info_text = "Depends on flac, metaflac, mktorrent, and optionally oggenc, lame, neroAacEnc, neroAacTag, mp3gain, aacgain, and vorbisgain."
	parser = OptionParser(usage=usage_text, version="%prog " + VERSION, epilog=info_text)
	parser.add_option('-v', '--verbose',	action='store_true',	dest='verbose',		default=False,	help='increase verbosity (Default: False)')
	parser.add_option('-n', '--notorrent',	action='store_true',	dest='notorrent',	default=False,	help='will not create a torrent after conversion (Default: False)')
	parser.add_option('-m', '--moveother',	action='store_true',	dest='moveother',	default=True,	help='move additional files (Default: True)')
	parser.add_option('-p', '--passkey',	dest='passkey',		default=passkey,	help='tracker PASSKEY', metavar='PASSKEY')
	parser.add_option('-t', '--tracker',	dest='tracker',		default=tracker,	help='tracker URL (Default: "http://tracker.what.cd:34000/")', metavar='URL')
	parser.add_option('-o', '--output',	dest='output',		default=output,		help='set the output PATH', metavar='PATH')
	parser.add_option('-z', '--zeropad',	action='store_true',	dest='zeropad',		default=True,	help='zeropad track numbers (Default: True)')
	parser.add_option('-r', '--replaygain',	action='store_true',	dest='replaygain',	default=False,	help='add ReplayGain to new files (Default: False)')
	parser.add_option('--threads',		type="int",		dest='max_threads',	default=max_threads,	help='set number of threads THREADS (Default: 1)', metavar='THREADS')
	parser.add_option('--FLAC',		action="callback",	callback=add_enc_option)

	for enc_opt in enc_options.keys():
		parser.add_option("--" + enc_opt, action="callback", callback=add_enc_option)

	(options, flacdirs) = parser.parse_args()

	if len(flacdirs) < 1:
		parser.error("Incorrect number of arguments")

	if not options.output.endswith('/'):
		options.output += '/'

	if len(codecs) == 0:
		print('You need to provide at least one format to transcode to (320, V0, Q8 ...)')
		exit()

	for flacdir in flacdirs:
		flacdir = os.path.abspath(flacdir)
		flacfiles = []

		for dirpath, dirs, files in os.walk(flacdir, topdown=False):
			for name in files:
				if fnmatch.fnmatch(name, '*.flac'):
					flacfiles.append(os.path.join(dirpath, name))

		for codec in codecs:
			if codec == "FLAC":
				print('Working with FLAC...')

				if options.output and options.passkey and options.tracker and not options.notorrent:
					if options.verbose: print('Creating torrent...')
					torrent_command = 'mktorrent -p -a {0}/announce -o "{1}.torrent" "{2}"'.format(options.tracker + options.passkey, escape(options.output + os.path.basename(flacdir)), flacdir)
					if options.verbose: print(escape(torrent_command))
					os.system(escape(torrent_command))

				print('Finished working with FLAC')
				continue

			mp3_dir = options.output + os.path.basename(flacdir) + " (" + codec + ")"
			mp3_dir = re.sub('FLAC', '', mp3_dir)
			if not os.path.exists(mp3_dir):
				os.makedirs(mp3_dir)

			print('Encoding with ' + codec + ' started...')

			threads = []
			cv = threading.Condition()
			for file in flacfiles:
				cv.acquire()
				while((threading.activeCount() == options.max_threads + 1) or (options.max_threads == 0 and threading.activeCount() == 2)):
					cv.wait()
				cv.release()
				t=Transcode(file, flacdir, mp3_dir, codec, options, cv)
				t.start()
				threads.append(t)

			for t in threads:
				t.join()

			print('\nEncoding with ' + codec + ' finished.')

			if options.moveother:
				if options.verbose: print('Moving other files...')
				for dirpath, dirs, files in os.walk(flacdir, topdown=False):
					for name in files:
						if not fnmatch.fnmatch(name, '*.flac'):
							d = re.sub(re.escape(flacdir), mp3_dir, dirpath)
							if not os.path.exists(d):
								os.makedirs(d)
							shutil.copy(os.path.join(dirpath, name), d)

			if options.replaygain:
				if options.verbose: print('Applying replay gain...')

				for dirpath, dirs, files in os.walk(mp3_dir, topdown=False):
					for name in dirs:
						if enc_options[codec]['enc'] == 'lame':
							os.system(escape('mp3gain -q -c -s i "' + os.path.join(dirpath, name) + '"/*.mp3'))
						if enc_options[codec]['enc'] == 'oggenc':
							os.system(escape('vorbisgain -qafrs "' + os.path.join(dirpath, name) + '"/*.ogg'))
						if enc_options[codec]['enc'] == 'neroAacEnc':
							os.system(escape('aacgain -q -c "' + os.path.join(dirpath, name) + '"/*.m4a'))

			if options.output and options.passkey and options.tracker and not options.notorrent:
				if options.verbose: print('Creating torrent...')
				torrent_command = 'mktorrent -p -a {0}/announce -o "{1}.torrent" "{2}"'.format(options.tracker + options.passkey, escape(options.output + os.path.basename(mp3_dir)), mp3_dir)
				if options.verbose: print(escape(torrent_command))
				os.system(escape(torrent_command))

		if options.verbose: print('All done with ' + flacdir + ' ...')
	return 0

if __name__ == '__main__':
	main()
